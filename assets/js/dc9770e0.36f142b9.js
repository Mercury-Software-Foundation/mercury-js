"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[330],{3413:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Overview","href":"/mercury-js/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"Getting started with Next.js","href":"/mercury-js/docs/nextjs","docId":"nextjs","unlisted":false},{"type":"link","label":"Getting started with Express","href":"/mercury-js/docs/express","docId":"express","unlisted":false},{"type":"link","label":"Models","href":"/mercury-js/docs/model","docId":"model","unlisted":false},{"type":"link","label":"Profiles","href":"/mercury-js/docs/profiles","docId":"profiles","unlisted":false},{"type":"link","label":"Mercury","href":"/mercury-js/docs/mercury","docId":"mercury","unlisted":false},{"type":"link","label":"Fields","href":"/mercury-js/docs/fields","docId":"fields","unlisted":false},{"type":"link","label":"Model Options","href":"/mercury-js/docs/options","docId":"options","unlisted":false},{"type":"link","label":"Hooks","href":"/mercury-js/docs/hook","docId":"hook","unlisted":false},{"type":"category","label":"Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Todo App with Next.js App Router and Mercury API","href":"/mercury-js/docs/Examples/todo-app","docId":"Examples/todo-app","unlisted":false}]}]},"docs":{"Examples/todo-app":{"id":"Examples/todo-app","title":"Todo App with Next.js App Router and Mercury API","description":"Let\'s craft a Todo App with Next.js App Router and Mercury API, incorporating features like custom lists, completed tasks, and user-specific access control.","sidebar":"tutorialSidebar"},"express":{"id":"express","title":"Getting started with Express","description":"This guide will walk you through setting up a Next.js application with @mercury-js/core, enabling you to quickly build a robust and secure API backend.","sidebar":"tutorialSidebar"},"fields":{"id":"fields","title":"Fields","description":"In Mercury, fields are the building blocks of your data models. They define the structure and types of data that can be stored in each model. This guide provides a detailed explanation of field types and their properties in Mercury.","sidebar":"tutorialSidebar"},"hook":{"id":"hook","title":"Hooks","description":"Mercury.js: Defining Hook Execution for Models and Actions","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Overview","description":"@mercury-js/core is a rapid API generation package that simplifies backend service development by generating Mongoose models, CRUD operations, GraphQL typedefs, and resolvers from a JSON model. It also supports pre- and post-event hooks and access control via profiles, enabling field-level and operation-level permissions.","sidebar":"tutorialSidebar"},"mercury":{"id":"mercury","title":"Mercury","description":"This guide provides a step-by-step overview of how to use the Mercury for managing GraphQL schemas and MongoDB models, along with examples of methods such as connect, disconnect, addGraphqlSchema, createModel, and deleteModel.","sidebar":"tutorialSidebar"},"model":{"id":"model","title":"Models","description":"Mercury Models: Defining Your Data Structure","sidebar":"tutorialSidebar"},"nextjs":{"id":"nextjs","title":"Getting started with Next.js","description":"This guide will walk you through setting up a Next.js application with @mercury-js/core, enabling you to quickly build a robust and secure API backend.","sidebar":"tutorialSidebar"},"options":{"id":"options","title":"Model Options","description":"The Model Options object is used to configure a model\'s behavior in Mercury. It includes settings like enabling history tracking and adding MongoDB indexes to optimize queries.","sidebar":"tutorialSidebar"},"profiles":{"id":"profiles","title":"Profiles","description":"Mercury.js: Defining Access Control for Models and Fields","sidebar":"tutorialSidebar"}}}}')}}]);