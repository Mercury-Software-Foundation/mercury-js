"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7151],{8420:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>a});var d=s(4848),r=s(8453);const c={sidebar_position:6,title:"Mercury"},i="Mercury Documentation",l={id:"mercury",title:"Mercury",description:"This guide provides a step-by-step overview of how to use the Mercury for managing GraphQL schemas and MongoDB models, along with examples of methods such as connect, disconnect, addGraphqlSchema, createModel, and deleteModel.",source:"@site/docs/mercury.md",sourceDirName:".",slug:"/mercury",permalink:"/mercury-js/docs/mercury",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mercury.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Mercury"},sidebar:"tutorialSidebar",previous:{title:"Profiles",permalink:"/mercury-js/docs/profiles"},next:{title:"Fields",permalink:"/mercury-js/docs/fields"}},o={},a=[{value:"1. Connecting to MongoDB",id:"1-connecting-to-mongodb",level:2},{value:"Usage:",id:"usage",level:3},{value:"Example",id:"example",level:3},{value:"2. Disconnecting from MongoDB",id:"2-disconnecting-from-mongodb",level:2},{value:"Usage:",id:"usage-1",level:3},{value:"Example",id:"example-1",level:3},{value:"3. Adding GraphQL Schema",id:"3-adding-graphql-schema",level:2},{value:"Usage:",id:"usage-2",level:3},{value:"Example",id:"example-2",level:3},{value:"4. Creating a Model",id:"4-creating-a-model",level:2},{value:"Usage:",id:"usage-3",level:3},{value:"Types",id:"types",level:3},{value:"Note:",id:"note",level:3},{value:"Example",id:"example-3",level:3},{value:"5. Deleting a Model",id:"5-deleting-a-model",level:2},{value:"Usage:",id:"usage-4",level:3},{value:"Example",id:"example-4",level:3}];function t(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"mercury-documentation",children:"Mercury Documentation"})}),"\n",(0,d.jsxs)(n.p,{children:["This guide provides a step-by-step overview of how to use the ",(0,d.jsx)(n.strong,{children:"Mercury"})," for managing GraphQL schemas and MongoDB models, along with examples of methods such as ",(0,d.jsx)(n.code,{children:"connect"}),", ",(0,d.jsx)(n.code,{children:"disconnect"}),", ",(0,d.jsx)(n.code,{children:"addGraphqlSchema"}),", ",(0,d.jsx)(n.code,{children:"createModel"}),", and ",(0,d.jsx)(n.code,{children:"deleteModel"}),"."]}),"\n",(0,d.jsx)(n.h2,{id:"1-connecting-to-mongodb",children:"1. Connecting to MongoDB"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"connect"})," method establishes a connection to the MongoDB database."]}),"\n",(0,d.jsx)(n.h3,{id:"usage",children:"Usage:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"mercury.connect(DB_URL);\n"})}),"\n",(0,d.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:'mercury.connect("mongodb://localhost:27017/mydatabase");\n'})}),"\n",(0,d.jsx)(n.p,{children:"This connects the Mercury instance to a MongoDB database hosted locally."}),"\n",(0,d.jsx)(n.h2,{id:"2-disconnecting-from-mongodb",children:"2. Disconnecting from MongoDB"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"disconnect"})," method is used to close the MongoDB connection."]}),"\n",(0,d.jsx)(n.h3,{id:"usage-1",children:"Usage:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"await mercury.disconnect();\n"})}),"\n",(0,d.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"await mercury.disconnect();\n"})}),"\n",(0,d.jsx)(n.p,{children:"This gracefully closes the connection to MongoDB and shuts down the Mercury ORM instance."}),"\n",(0,d.jsx)(n.h2,{id:"3-adding-graphql-schema",children:"3. Adding GraphQL Schema"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"addGraphqlSchema"})," method allows you to add custom type definitions and resolvers to the existing GraphQL schema."]}),"\n",(0,d.jsx)(n.h3,{id:"usage-2",children:"Usage:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"mercury.addGraphqlSchema(typeDefs, resolvers);\n"})}),"\n",(0,d.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"const typeDefs = `\n  type Query {\n    getBook(id: ID!): Book\n  }\n\n  type Book {\n    id: ID!\n    title: String\n    author: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    getBook: async (_, { id }) => {\n      return await mercury.db.Book.findById(id);\n    },\n  },\n};\n\nmercury.addGraphqlSchema(typeDefs, resolvers);\n"})}),"\n",(0,d.jsxs)(n.p,{children:["This adds a new GraphQL schema for querying a ",(0,d.jsx)(n.code,{children:"Book"})," object."]}),"\n",(0,d.jsx)(n.h2,{id:"4-creating-a-model",children:"4. Creating a Model"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"createModel"})," method allows you to define a MongoDB model in Mercury ORM."]}),"\n",(0,d.jsx)(n.h3,{id:"usage-3",children:"Usage:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"mercury.createModel(name, fields, options?);\n"})}),"\n",(0,d.jsx)(n.p,{children:"Parameters:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.em,{children:(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"name"})})}),': Name of the model (e.g., "',(0,d.jsx)(n.code,{children:"User"}),'")']}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.em,{children:(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"/mercury-js/docs/fields",children:(0,d.jsx)(n.code,{children:"fields"})})})}),": Fields of the model, including types and options"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.em,{children:(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"/mercury-js/docs/options",children:(0,d.jsx)(n.code,{children:"options"})})})}),": Optional settings for the model"]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"type TModel = {\n  fields: [`TFields`];\n  name: string;\n  options?: TOptions;\n};\n"})}),"\n",(0,d.jsx)(n.h3,{id:"note",children:"Note:"}),"\n",(0,d.jsxs)(n.p,{children:["For a detailed explanation of the ",(0,d.jsx)(n.code,{children:"TFields"})," and ",(0,d.jsx)(n.code,{children:"TField"})," types, please refer to the ",(0,d.jsx)(n.a,{href:"/mercury-js/docs/fields#field-types-and-structure",children:"Field Types and Structure"})," section in the Fields documentation."]}),"\n",(0,d.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"const fields = {\n  name: { type: 'string', required: true },\n  email: { type: 'string', required: true },\n  age: { type: 'number', required: false },\n  role: { type: 'enum', enum: ['USER', 'ADMIN'], default: 'USER' },\n  createdAt: { type: 'date', default: Date.now },\n};\n\nmercury.createModel('User', fields);\n"})}),"\n",(0,d.jsxs)(n.p,{children:["This creates a ",(0,d.jsx)(n.code,{children:"User"})," model with fields ",(0,d.jsx)(n.code,{children:"name"}),", ",(0,d.jsx)(n.code,{children:"email"}),", ",(0,d.jsx)(n.code,{children:"age"}),", ",(0,d.jsx)(n.code,{children:"role"}),", and ",(0,d.jsx)(n.code,{children:"createdAt"}),"."]}),"\n",(0,d.jsx)(n.p,{children:"Note that any additional Mongoose-supported properties can be included in the field definition and will behave as they do in Mongoose."}),"\n",(0,d.jsx)(n.h2,{id:"5-deleting-a-model",children:"5. Deleting a Model"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"deleteModel"})," method removes a model from Mercury ORM and the associated GraphQL schema."]}),"\n",(0,d.jsx)(n.h3,{id:"usage-4",children:"Usage:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"mercury.deleteModel(modelName);\n"})}),"\n",(0,d.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"mercury.deleteModel('User');\n"})}),"\n",(0,d.jsxs)(n.p,{children:["This deletes the ",(0,d.jsx)(n.code,{children:"User"})," model from the Mercury instance, removing the corresponding GraphQL type definitions and resolvers."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(t,{...e})}):t(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var d=s(6540);const r={},c=d.createContext(r);function i(e){const n=d.useContext(c);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),d.createElement(c.Provider,{value:n},e.children)}}}]);