"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7164],{220:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=i(4848),l=i(8453);const r={sidebar_position:7,title:"Fields"},d="Mercury Fields",o={id:"fields",title:"Fields",description:"In Mercury, fields are the building blocks of your data models. They define the structure and types of data that can be stored in each model. This guide provides a detailed explanation of field types and their properties in Mercury.",source:"@site/docs/fields.md",sourceDirName:".",slug:"/fields",permalink:"/mercury-js/docs/fields",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fields.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Fields"},sidebar:"tutorialSidebar",previous:{title:"Mercury",permalink:"/mercury-js/docs/mercury"},next:{title:"Model Options",permalink:"/mercury-js/docs/options"}},t={},c=[{value:"Field Types and Structure",id:"field-types-and-structure",level:2},{value:"TFields",id:"tfields",level:3},{value:"TField",id:"tfield",level:3},{value:"Supported Field Types",id:"supported-field-types",level:2},{value:"Additional Mongoose-Supported Properties",id:"additional-mongoose-supported-properties",level:2},{value:"Field Types and Usage",id:"field-types-and-usage",level:2},{value:"Basic Types",id:"basic-types",level:3},{value:"Complex Types",id:"complex-types",level:3},{value:"Examples",id:"examples",level:3}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mercury-fields",children:"Mercury Fields"})}),"\n",(0,s.jsx)(n.p,{children:"In Mercury, fields are the building blocks of your data models. They define the structure and types of data that can be stored in each model. This guide provides a detailed explanation of field types and their properties in Mercury."}),"\n",(0,s.jsx)(n.h2,{id:"field-types-and-structure",children:"Field Types and Structure"}),"\n",(0,s.jsx)(n.p,{children:"Mercury uses TypeScript types to define the structure of fields in a model. Here are the key types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"type TFields = {\n  [fieldName: string]: TField;\n};\n\ntype TField = {\n  type:\n    | 'string'\n    | 'number'\n    | 'float'\n    | 'boolean'\n    | 'relationship'\n    | 'enum'\n    | 'virtual'\n    | 'mixed'\n    | 'date';\n  ref?: string;\n  enum?: Array<string | number>;\n  enumType?: string;\n  required?: boolean;\n  unique?: boolean;\n  many?: boolean;\n  localField?: string;\n  foreignField?: string;\n  bcrypt?: boolean;\n  rounds?: number;\n  ignoreGraphQL?: boolean;\n  default?: any;\n  [x: string]: any;\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tfields",children:"TFields"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TFields"})," is a type that represents the structure of all fields in a model. It's an object where each key is the name of a field, and the corresponding value is of type ",(0,s.jsx)(n.code,{children:"TField"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"tfield",children:"TField"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TField"})," is a type that defines the structure of an individual field. It includes the following properties:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./fields#supported-field-types",children:(0,s.jsx)(n.code,{children:"type"})})," (Required): Specifies the data type of the field. It must be one of the supported Mercury types: 'string', 'number', 'float', 'boolean', 'relationship', 'enum', 'virtual', 'mixed', or 'date'."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ref"})," (Optional): Used for 'relationship' fields to specify the referenced model."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enum"})," (Optional): An array of allowed values for 'enum' fields."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enumType"})," (Optional): Specifies the type of enum values ('string' or 'number')."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"required"})," (Optional): A boolean indicating if the field is mandatory."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"unique"})," (Optional): A boolean indicating if each value for this field must be unique across all documents."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"many"})," (Optional): A boolean used for 'relationship' fields to indicate a one-to-many relationship."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"localField"})," (Optional): Used for 'virtual' fields to specify the local field for population."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"foreignField"})," (Optional): Used for 'virtual' fields to specify the foreign field for population."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bcrypt"})," (Optional): A boolean indicating if the value should be encrypted using bcrypt (for 'string' fields)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rounds"})," (Optional): The number of bcrypt rounds for encryption."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ignoreGraphQL"})," (Optional): A boolean to exclude the field from GraphQL schemas."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"default"})," (Optional): Sets a default value for the field."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"[x: string]: any"}),": Allows for additional Mongoose-supported properties to be included."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"supported-field-types",children:"Supported Field Types"}),"\n",(0,s.jsx)(n.p,{children:"Mercury supports the following field types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string"}),": For text data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"number"}),": For integer values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"float"}),": For decimal numbers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"boolean"}),": For true/false values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"relationship"}),": For references to other models"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enum"}),": For fields with a predefined set of values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"virtual"}),": For computed fields that don't persist in the database"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mixed"}),": For fields that can hold any type of data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"date"}),": For date and time values"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"These types are mapped to Mongoose types as follows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string"})," \u2192 ",(0,s.jsx)(n.code,{children:"String"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"number"})," \u2192 ",(0,s.jsx)(n.code,{children:"Number"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"float"})," \u2192 ",(0,s.jsx)(n.code,{children:"Number"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"boolean"})," \u2192 ",(0,s.jsx)(n.code,{children:"Boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"relationship"})," \u2192 ",(0,s.jsx)(n.code,{children:"ObjectId"})," or ",(0,s.jsx)(n.code,{children:"[ObjectId]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enum"})," \u2192 ",(0,s.jsx)(n.code,{children:"String"})," or ",(0,s.jsx)(n.code,{children:"Number"})," with enum validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"virtual"})," \u2192 Mongoose virtual field"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mixed"})," \u2192 ",(0,s.jsx)(n.code,{children:"mongoose.Schema.Types.Mixed"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"date"})," \u2192 ",(0,s.jsx)(n.code,{children:"Date"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Only these types are directly supported by Mercury.js. For other Mongoose types, you can use the ",(0,s.jsx)(n.code,{children:"mixed"})," type and handle the specifics in your application logic."]}),"\n",(0,s.jsx)(n.h2,{id:"additional-mongoose-supported-properties",children:"Additional Mongoose-Supported Properties"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important:"})," Mercury's flexibility extends beyond its built-in field options!"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["While Mercury provides a robust set of field properties, you're not limited to just these. Thanks to the ",(0,s.jsx)(n.code,{children:"[x: string]: any"})," index signature in the ",(0,s.jsx)(n.code,{children:"TField"})," type, you can leverage the full power of Mongoose's SchemaType options in your Mercury models."]}),"\n",(0,s.jsx)(n.p,{children:"This means you can include any additional Mongoose-supported field properties in your field definitions. These properties will behave exactly as they do in Mongoose, giving you fine-grained control over your data models."}),"\n",(0,s.jsx)(n.p,{children:"For example, you might want to use Mongoose-specific validators, transformers, or other advanced options:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"{\n  email: {\n    type: 'string',\n    required: true,\n    unique: true,\n    lowercase: true, // Mongoose-specific option\n    validate: { // Custom Mongoose validator\n      validator: function(v) {\n        return /^\\S+@\\S+\\.\\S+$/.test(v);\n      },\n      message: props => `${props.value} is not a valid email address!`\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To explore the full range of available SchemaType options and unleash the full potential of your Mercury models, we recommend checking out the ",(0,s.jsx)(n.a,{href:"https://mongoosejs.com/docs/schematypes.html#schematype-options",children:"Mongoose SchemaType Options documentation"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"By combining Mercury's simplicity with Mongoose's power, you can create highly customized and efficient data models for your applications."}),"\n",(0,s.jsx)(n.h2,{id:"field-types-and-usage",children:"Field Types and Usage"}),"\n",(0,s.jsx)(n.p,{children:"Mercury field types are mapped to Mongoose types as follows:"}),"\n",(0,s.jsx)(n.h3,{id:"basic-types",children:"Basic Types"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"String"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Mercury: ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:["Mongoose: ",(0,s.jsx)(n.code,{children:"String"})]}),"\n",(0,s.jsxs)(n.li,{children:["Usage:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"fieldName: {\n  type: 'string'\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Number"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Mercury: ",(0,s.jsx)(n.code,{children:"number"})]}),"\n",(0,s.jsxs)(n.li,{children:["Mongoose: ",(0,s.jsx)(n.code,{children:"Number"})]}),"\n",(0,s.jsxs)(n.li,{children:["Usage:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"fieldName: {\n  type: 'number'\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Float"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Mercury: ",(0,s.jsx)(n.code,{children:"float"})]}),"\n",(0,s.jsxs)(n.li,{children:["Mongoose: ",(0,s.jsx)(n.code,{children:"Number"})]}),"\n",(0,s.jsxs)(n.li,{children:["Usage:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"fieldName: {\n  type: 'float'\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Boolean"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Mercury: ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:["Mongoose: ",(0,s.jsx)(n.code,{children:"Boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:["Usage:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"fieldName: {\n  type: 'boolean'\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Date"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Mercury: ",(0,s.jsx)(n.code,{children:"date"})]}),"\n",(0,s.jsxs)(n.li,{children:["Mongoose: ",(0,s.jsx)(n.code,{children:"Date"})]}),"\n",(0,s.jsxs)(n.li,{children:["Usage:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"fieldName: {\n  type: 'date'\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"complex-types",children:"Complex Types"}),"\n",(0,s.jsxs)(n.ol,{start:"6",children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Relationship"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Mercury: ",(0,s.jsx)(n.code,{children:"relationship"})]}),"\n",(0,s.jsxs)(n.li,{children:["Mongoose: ",(0,s.jsx)(n.code,{children:"ObjectId"})," or ",(0,s.jsx)(n.code,{children:"[ObjectId]"})]}),"\n",(0,s.jsxs)(n.li,{children:["Usage:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"fieldName: {\n  type: 'relationship',\n  ref: 'ModelName',\n  many: boolean // optional, default is false\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ref"}),": Specifies the name of the referenced model"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"many"}),": If true, creates an array of ObjectIds (one-to-many relationship)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Enum"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Mercury: ",(0,s.jsx)(n.code,{children:"enum"})]}),"\n",(0,s.jsxs)(n.li,{children:["Mongoose: ",(0,s.jsx)(n.code,{children:"String"})," or ",(0,s.jsx)(n.code,{children:"Number"})," with enum validation"]}),"\n",(0,s.jsxs)(n.li,{children:["Usage:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"fieldName: {\n  type: 'enum',\n  enumType: 'string' | 'number',\n  enum: ['VALUE1', 'VALUE2', ...] | [1, 2, ...],\n  default: 'VALUE1' | 1 // optional\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enumType"}),": Specifies whether the enum values are strings or numbers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enum"}),": An array of allowed values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"default"}),": Optional default value from the enum array"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Virtual"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Mercury: ",(0,s.jsx)(n.code,{children:"virtual"})]}),"\n",(0,s.jsx)(n.li,{children:"Mongoose: Mongoose virtual field"}),"\n",(0,s.jsxs)(n.li,{children:["Usage:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"fieldName: {\n  type: 'virtual',\n  ref: 'ModelName',\n  localField: 'localFieldName',\n  foreignField: 'foreignFieldName'\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ref"}),": The model to use for population"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"localField"}),": The field in the current model to match against"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"foreignField"}),": The field in the referenced model to match against"]}),"\n",(0,s.jsx)(n.li,{children:"This creates a virtual field that can be populated with related documents"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Mixed"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Mercury: ",(0,s.jsx)(n.code,{children:"mixed"})]}),"\n",(0,s.jsxs)(n.li,{children:["Mongoose: ",(0,s.jsx)(n.code,{children:"mongoose.Schema.Types.Mixed"})]}),"\n",(0,s.jsxs)(n.li,{children:["Usage:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"fieldName: {\n  type: 'mixed'\n}\n"})}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Allows any type of data to be stored in this field"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:"Here are some examples demonstrating the usage of different field types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import mercury from "@mercury-js/core";\n\nexport const User = mercury.createModel(\n  "User",\n  {\n    name: {\n      type: "string",\n      required: true\n    },\n    age: {\n      type: "number",\n      min: 0,\n      max: 120\n    },\n    height: {\n      type: "float",\n      min: 0\n    },\n    isActive: {\n      type: "boolean",\n      default: true\n    },\n    birthDate: {\n      type: "date"\n    },\n    profilePic: {\n      type: "relationship",\n      ref: "Asset"\n    },\n    friends: {\n      type: "relationship",\n      ref: "User",\n      many: true\n    },\n    role: {\n      type: "enum",\n      enumType: "string",\n      enum: ["CUSTOMER", "VENDOR", "ADMIN"],\n      default: "CUSTOMER"\n    },\n    allocatedApartment: {\n      type: "virtual",\n      ref: "ApartmentAllocation",\n      localField: "_id",\n      foreignField: "customer"\n    },\n    additionalInfo: {\n      type: "mixed"\n    }\n  }\n);\n'})}),"\n",(0,s.jsx)(n.p,{children:"This example demonstrates the usage of all supported field types in Mercury, including basic types, relationships, enums, virtual fields, and mixed fields."}),"\n",(0,s.jsx)(n.p,{children:"Remember that you can add any additional Mongoose-supported properties to these field definitions, and they will behave as they do in Mongoose. This flexibility allows you to fine-tune your schema according to your specific requirements."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>o});var s=i(6540);const l={},r=s.createContext(l);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);